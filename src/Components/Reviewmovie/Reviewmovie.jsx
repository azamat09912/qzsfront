import React, { useState, useEffect } from 'react';
import './ReviewMovies.css'; 

export default function ReviewMovies() {
  const [review, setReview] = useState('');
  const [rating, setRating] = useState(5);
  const [message, setMessage] = useState('');
  const [reviews, setReviews] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isDarkTheme, setIsDarkTheme] = useState(false);

  const toggleTheme = () => {
    setIsDarkTheme(!isDarkTheme);
    document.body.classList.toggle('dark-theme');
  };

  const formatDateRelative = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    if (diffInMinutes < 60) return `${diffInMinutes} ${getNoun(diffInMinutes, '–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')} –Ω–∞–∑–∞–¥`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours} ${getNoun(diffInHours, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')} –Ω–∞–∑–∞–¥`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays} ${getNoun(diffInDays, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')} –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
  };

  const getNoun = (number, one, two, five) => {
    let n = Math.abs(number);
    n %= 100;
    if (n >= 5 && n <= 20) return five;
    n %= 10;
    if (n === 1) return one;
    if (n >= 2 && n <= 4) return two;
    return five;
  };

  const fetchReviews = async () => {
    try {
      const res = await fetch('/api/reviews/all');
      const data = await res.json();
      setReviews(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–Ω–∑–∏–π:', error);
    }
  };

  useEffect(() => {
    fetchReviews();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      setIsDarkTheme(true);
      document.body.classList.add('dark-theme');
    }
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!review.trim()) {
      setMessage('–†–µ—Ü–µ–Ω–∑–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.');
      return;
    }

    setIsSubmitting(true);
    setMessage('');

    try {
      const token = localStorage.getItem('token');
      const response = await fetch('https://qazaqcinema.onrender.com/api/reviews', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ review, rating: Number(rating) }),
      });

      const data = await response.json();

      if (response.ok) {
        setMessage('‚úÖ –†–µ—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
        setReview('');
        setRating(5);
        fetchReviews();
      } else {
        setMessage(data.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏.');
      }
    } catch {
      setMessage('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
  const handleDeleteAll = async () => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) return;
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('https://qazaqcinema.onrender.com/api/reviews/all', {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` },
      });
      
      if (response.ok) {
        setMessage('–í—Å–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
        fetchReviews();
      } else {
        const data = await response.json();
        setMessage(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–π');
      }
    } catch {
      setMessage('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const StarRating = ({ value, onChange }) => {
    const stars = Array.from({ length: 10 }, (_, i) => i + 1);
    
    return (
      <div className="star-rating">
        {stars.map((star) => (
          <button
            key={star}
            type="button"
            onClick={() => onChange(star)}
            className={`star ${star <= value ? 'active' : ''}`}
          >
            {star <= value ? '‚òÖ' : '‚òÜ'}
          </button>
        ))}
      </div>
    );
  };

  return (
    <div className="review-container">
      

      <h2 className="review-title">–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é</h2>
      
      <form onSubmit={handleSubmit} className="review-form">
        <textarea
          value={review}
          onChange={(e) => setReview(e.target.value)}
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ä–µ—Ü–µ–Ω–∑–∏—é –∑–¥–µ—Å—å..."
          required
          rows={5}
          className="review-textarea"
        />
        
        <div className="rating-container">
          <label className="rating-label">
            –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: <span className="rating-value">{rating}</span>/10
          </label>
          <StarRating value={rating} onChange={setRating} />
        </div>
        
        <button
          type="submit"
          disabled={isSubmitting}
          className={`submit-btn ${isSubmitting ? 'submitting' : ''}`}
        >
          {isSubmitting ? (
            <span className="submit-loading">
              <span className="loading-icon">‚è≥</span> –û—Ç–ø—Ä–∞–≤–∫–∞...
            </span>
          ) : (
            'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é'
          )}
        </button>
      </form>

      {message && (
        <div className={`message ${message.includes('‚úÖ') ? 'success' : 'error'}`}>
          {message}
        </div>
      )}

   

      <div className="reviews-section">
        <h3 className="reviews-title">–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
        
        {reviews.length === 0 ? (
          <div className="no-reviews">
            –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!
          </div>
        ) : (
          <div className="reviews-grid">
            {reviews.map((r) => (
              <div key={r.id} className="review-card">
                <div className="review-header">
                  <div className="avatar-wrapper">
                    <img
                      src={r.avatar || '/default-avatar.png'}
                      alt="–ê–≤–∞—Ç–∞—Ä"
                      className="review-avatar"
                      onLoad={(e) => e.target.classList.add('loaded')}
                    />
                  </div>
                  <div className="review-user">
                    <h4 className="user-name">
                      {r.name || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                    </h4>
                    <small className="review-date">
                      {formatDateRelative(r.created_at)}
                    </small>
                  </div>
                </div>
                
                <div className="review-rating">
                  {'‚òÖ'.repeat(Math.round(r.rating))}
                  {'‚òÜ'.repeat(10 - Math.round(r.rating))}
                  <span className="rating-text">
                    {r.rating}/10
                  </span>
                </div>
                
                <p className="review-content">
                  {r.review}
                </p>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}